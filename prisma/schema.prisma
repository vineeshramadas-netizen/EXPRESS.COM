generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  passwordHash     String
  isAdmin          Boolean  @default(false)
  refreshTokenHash String?
  createdAt        DateTime @default(now())
  bookings         Booking[]
}

model Hotel {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String
  city        String   @db.VarChar(120)
  country     String
  images      String[]
  rating      Float?
  createdAt   DateTime @default(now())
  rooms       Room[]
  bookings    Booking[]

  @@index([city])
}

model Room {
  id             String   @id @default(uuid())
  hotelId        String
  hotel          Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  roomType       RoomType
  pricePerNight  Decimal  @db.Decimal(10,2)
  maxGuests      Int
  totalInventory Int
  images         String[]
  createdAt      DateTime @default(now())
  bookings       Booking[]
  holds          BookingHold[]

  @@index([pricePerNight])
}

model Booking {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId          String
  room            Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  hotelId         String
  hotel           Hotel          @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  startDate       DateTime
  endDate         DateTime
  nights          Int
  guests          Int
  totalPrice      Decimal        @db.Decimal(10,2)
  status          BookingStatus  @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime       @default(now())

  @@index([roomId, startDate])
}

model BookingHold {
  id        String   @id @default(uuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime
  expiresAt DateTime
  guests    Int      @default(1)
}
